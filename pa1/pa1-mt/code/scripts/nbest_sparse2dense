#!/usr/bin/perl

use strict;
use POSIX;
use Fatal qw(open close);
use utf8;
binmode(STDIN,":utf8");
binmode(STDOUT,":utf8");
binmode(STDERR,":utf8");

die "Usage: $0 (weights) (nbest list) [(uniq)]\n" if $#ARGV!=1 && $#ARGV!=2;
my $uniq = $ARGV[2];

# Load weights:
my $wfile = $ARGV[0];
open(F,$wfile);
my %weights;
binmode(F,":utf8");
while(<F>) {
	chomp;
	my ($f,$v) = split(/\s+/);
	$weights{"$f:"} = $v;
}
close(F);
my @weights = sort keys %weights;

# Write weights to stderr:
foreach my $f (@weights) {
	print STDERR $weights{$f}, " ";
}
print STDERR "\n";

# Read nbest list:
my $nfile = $ARGV[1];
my $cat = $nfile =~ /\.gz$/ ? 'zcat' : 'cat';
my @nbest;
open(F,"$cat $nfile 2> /dev/null |");
binmode(F,":utf8");
while(<F>) {
	chomp;
	my @els = split(/\s*\|\|\|\s*/);
	my $featStr = $els[2];
	my @feat = split(/\s+/, $featStr);
	assert(@feat % 2 == 0);
	my %feat = @feat;
	$els[2] = '';
	my $sum = '';
	for my $i (0..$#weights) {
	  my $v = $feat{$weights[$i]} || 0.0;
		$sum += $v * $weights{$weights[$i]};
	  $els[2] .= " " if($i>0);
		$els[2] .= sprintf("%f", $v);
	}
	my $diff = abs($sum-$els[3]);
	#print STDERR "WARNING: $sum - $els[3] = $diff > 1e-3\n" if($diff > 1e-3);
	push @{$nbest[$els[0]]}, [$els[1], $els[2], $sum];
}
close(F);

# Sort and print nbest list:
for my $i (0..$#nbest) {
	my %uniq;
	for my $j (sort {$nbest[$i][$b][2] <=> $nbest[$i][$a][2]} 0..$#{$nbest[$i]}) {
		my $out = $nbest[$i][$j][0];
		next if $uniq && $uniq{$out};
		print $i.' ||| '.join(' ||| ', @{$nbest[$i][$j]}),"\n";
		$uniq{$out} = 1;
	}
}
