#!/usr/bin/perl
#
# Load local Phrasal Perl modules from the scripts directory.
#
use Cwd 'abs_path';
use File::Basename;
BEGIN { push @INC, dirname(abs_path($0)) }

#####################################################
# Filter LM based on phrase table.
#
# author: Michel Galley
#####################################################

use strict;
use POSIX;
use utf8;
binmode(STDIN,":utf8");
binmode(STDOUT,":utf8");
binmode(STDERR,":utf8");

use arg_utils qw(&get_args &get_opts);

my %opts = get_opts(['v',0,'program will be more verbose'],['d',0,'dump trie']);
my %args = get_args('lm');

my %w;
my @wi;
my %trie;

my $rootStateIdx=0;
my $curStateIdx=0;

my $prefixWordIdx=0; $wi[0]='<ANY>';
my $epsWordIdx=1; $wi[1]='<EPS>';
my $curWordIdx=1;

my $line=0;
print STDERR "Reading phrase table...\n";
open(N,"| ngram -lm - -write-lm - -order 5");
while(<STDIN>) {
	#print STDERR "% ptable entry: $_";
	my @i = map { w2i($_) } split(/\s+/);
	addSubseqs(\@i);
	print STDERR '.' if ++$line % 1000 == 0;
}
dumpTrie() if $opts{d};
my $cmd = $args{lm} =~ /\.gz$/ ? 'zcat' : 'cat';
open(F,"$cmd $args{lm} |");
print STDERR "\nReading ARPA file...\n";
while(<F>) {
	chomp;
	if(/^[\-\d\.e]+\t(.*?)(\t[\-\d\.e]+)?$/) {
		my @i = map { w2i($_) } split(/\s+/,$1);
		if(matches(\@i,0,$rootStateIdx)) {
			print N $_."\n";
		} else {
			#print STDERR "% skipped ngram: <$1>\n";
		}
	} else {
		print N $_."\n";
	}
}
close(F);
close(N);
exit(0);

############# Trie matching #################

sub matches {
	my ($seq,$i,$state,$noprefix) = @_;
	return 0 unless defined $state;
	return 1 if $i > $#{$seq};
	return 1 if matches($seq,$i+1,$trie{$state}{$seq->[$i]});
	return 1 if !$noprefix && $i==0 && matches($seq,$i,$trie{$state}{$prefixWordIdx},1);
	return 1 if matches($seq,$i,$trie{$state}{$epsWordIdx});
	return 0;
}

############# Trie construction #############

sub w2i {
	my $w = shift;
	return $w{$w} if($w{$w});
	$w{$w} = ++$curWordIdx;
	$wi[$curWordIdx] = $w;
	return $w{$w};
}

sub addSubseqs {
	my ($seq) = @_;
	for(my $i=0; $i<=$#{$seq}; ++$i) {
		for(my $j=$i; $j<=$#{$seq}; ++$j) {
			addSeq($seq,$i,$j);
		}
	}
}

sub addSeq {
	my ($seq,$i,$j) = @_;
	my $curState = $rootStateIdx;
	$curState = addEdge($curState,$prefixWordIdx) if($i>0);
	for(my $k=$i; $k<=$j; ++$k) {
		$curState = addEdge($curState,$seq->[$k]);
	}
	addLoopingEdge($curState,$epsWordIdx) if($j==$#{$seq});
}

sub addEdge {
	my ($state,$i) = @_;
	$trie{$state}{$i} ||= ++$curStateIdx;
	return $trie{$state}{$i};
}

sub addLoopingEdge {
	my ($state,$i) = @_;
	$trie{$state}{$i} = $rootStateIdx;
}

sub dumpTrie {
	my %next;
	foreach my $s (keys %trie) {
		foreach my $i (keys %{$trie{$s}}) {
			my $next = $trie{$s}{$i};
			print "$s\t$next\t$wi[$i]\n";
			$next{$next} = 1;
			#print "$s\t$trie{$s}{$i}\t$wi[$i]($i)\n";
		}
	}
	print "$rootStateIdx\n";
}
