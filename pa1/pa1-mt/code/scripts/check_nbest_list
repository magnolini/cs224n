#!/usr/bin/perl

#####################################################
# Add missing features to Moses n-best lists.  
#
# author: Michel Galley
#####################################################

use strict;
use POSIX;
use Fatal qw(open close);
use utf8;
binmode(STDIN,":utf8");
binmode(STDOUT,":utf8");
binmode(STDERR,":utf8");

die "Usage: $0 [<feature_weights>]\n" if $#ARGV > 0;

# Sample feature weight file: 
# [inline, UnknownWord:0.4256500447245233, LexR:discontinuousWithPrevious:0.0930862021901921, WordPenalty:-0.08832300426626058, LexR:monotoneWithNext:0.07229376551445457, TM:unknownphrase:-0.06656426184070335, LexR:monotoneWithPrevious:0.06364067557839378, TM:phrasePenalty:0.04924039073031456, LM:0.027555968575776732, LexR:discontinuousWithNext:0.024837198577585262, TM:phi(f|t):0.02036231738556518, LinearDistortion:0.018952569372032834, TM:lex(f|t):0.015939988882485608, TM:phi(t|f):0.014309912977133167, TM:lex(t|f):0.009758229555620994, LexR:swapWithPrevious:0.009109980989994897, LexR:swapWithNext:3.754888389631476E-4]

my %w;
if($#ARGV==0) {
	open(W,$ARGV[0]);
	my $wstr = <W>;
	$wstr =~ s/\[inline, (.*)\]/$1/;
	close(W);
	foreach my $w (split(/,?\s+/,$wstr)) {
		$w =~ /(\S+):([^:]+)/;
		my ($name,$weight) = ($1,$2);
		$w{$name} = $weight;
		print STDERR "WEIGHT: $name = $weight\n";
	}
}

my $old_id = -1; 
my $old_score = 1e3;
while(<STDIN>) {
	chomp;
	# Sample line:
	# 0 ||| the lebanese president , emile lahoud , was exposed to a violent campaign in the chamber of deputies , which was held yesterday in the regular legislative session turned into a " trial " for the president of the republic for its position on the international court and " observations " made here on this subject . ||| LexR:discontinuousWithNext: -8.4005E-1 LexR:discontinuousWithPrevious: -4.0077E-1 LexR:monotoneWithNext: -1.8497E0 LexR:monotoneWithPrevious: -2.0061E0 LexR:swapWithNext: -4.3757E-1 LexR:swapWithPrevious: -9.5221E-1 LM: -2.1153E2 LinearDistortion: -16 TM:lex(f|t): -8.9809E1 TM:lex(t|f): -7.392E1 TM:phi(f|t): -4.1862E1 TM:phi(t|f): -3.5583E1 TM:phrasePenalty: 1.9998E1 UnknownWord: 0 WordPenalty: -57 ||| -3.9558E0 ||| 0=7-8 1-4=0-6 5=9 6-7=10-12 8-10=13-18 11-14=19-24 15-16=26-27 17=25 18-20=28-31 21-22=32-33 23=34 24-25=35-39 26-29=40-44 30-33=45-48 34-35=49-50 36-38=51 39=52 40=53 41-42=54-55 43=56	
	my @els = split(/\s*\|\|\|\s*/);
	assert($#els == 4);
	my $id = $els[0];
	if($old_id ne $id) {
		warn "not incremental n-best list: $old_id+1 != $id\n" if $old_id+1 != $id;
		$old_id = $id;
		$old_score = 0;
	}
	my $ref_score = $els[3];
	my @f = split(/\s+/,$els[2]);
	assert(scalar @f % 2 == 0);
	my %f = @f;
	my $score = 0.0;
	print "$id ||| $els[1] |||";
	foreach my $k (keys %w) {
		$f{"$k:"} += 0.0;
		my $f = $f{"$k:"};
		$f += 0.0;
		$score += $w{$k}*$f;
		print " $k: $f";
	}
	my $ratio = abs($score/$ref_score-1);
	warn "score in nbest: $ref_score computed score: $score ratio: $ratio\n" if($ratio > 1e-2);
	warn "bad ordering : $old_score < $score\n" if $old_score < $score;
	print " ||| $score ||| ".correctPhraseAlignment($els[4])."\n";
}
exit 0;

sub correctPhraseAlignment {
	my $orig_order = shift;
	my %al = map { /^[\d\-]+=(\d+)(\-\d+)?$/; ($_,$1) } split(/\s+/,$orig_order);
	my $correct_order = join(' ',sort {$al{$a} <=> $al{$b}} keys %al);
	warn "Wrong order:\norig:    $orig_order\ncorrect: $correct_order\n" if($orig_order ne $correct_order);
	return $correct_order;
}
